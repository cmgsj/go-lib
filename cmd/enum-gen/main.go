package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"unicode"

	"github.com/go-playground/validator/v10"
	"gopkg.in/yaml.v3"
)

var tmpl = template.Must(template.New("gen").Parse(
	`// Code generated by enum-gen v0.0.0. DO NOT EDIT.
{{ $enum := . }}
package {{ $enum.Package }}

import "fmt"

type {{ $enum.Name }} interface {
	String() string
	{{ $enum.Impl }}() {{ $enum.Type }}
}

var (
{{ range $value := $enum.Values }}{{ $value.Name }} {{ $enum.Name }} = {{ $enum.Impl }}{name: "{{ $value.Name }}", value: {{ if eq $enum.Type "string" }}"{{ $value.Value }}"{{ else }}{{ $value.Value }}{{ end }}}
{{ end }})

func Parse(x {{ $enum.Type }}) ({{ $enum.Name }}, error) {
	switch x {
{{ range $value := $enum.Values }}case {{ if eq $enum.Type "string" }}"{{ $value.Value }}"{{ else }}{{ $value.Value }}{{ end }}:
	return {{ $value.Name }}, nil
{{ end }}default:
	return nil, fmt.Errorf("invalid {{ $enum.Impl }} %v", x)
	}
}

func Is(x, y {{ $enum.Impl }}) bool {
	return x.{{ $enum.Impl }}() == y.{{ $enum.Impl }}()
}

type {{ $enum.Impl }} struct {
	name  string
	value {{ $enum.Type }}
}

func (v {{ $enum.Impl }}) String() string {
	return v.name
}

func (v {{ $enum.Impl }}) {{ $enum.Impl }}() {{ $enum.Type }} {
	return v.value
}
`))

type Config struct {
	Enums []Enum `yaml:"enums" validate:"required,dive"`
}

type Enum struct {
	Out     string  `yaml:"out" validate:"required"`
	Package string  `yaml:"package" validate:"required"`
	Name    string  `yaml:"name" validate:"required"`
	Type    string  `yaml:"type" validate:"required"`
	Values  []Value `yaml:"values" validate:"required,dive"`
	Impl    string  `yaml:"-"`
}

type Value struct {
	Name  string `yaml:"name" validate:"required"`
	Value string `yaml:"value" validate:"required"`
}

func main() {
	if err := run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

func run() error {
	f, err := os.Open("enum.gen.yaml")
	if err != nil {
		return err
	}
	enc := yaml.NewDecoder(f)
	enc.KnownFields(true)
	var config Config
	err = enc.Decode(&config)
	if err != nil {
		return err
	}
	err = validator.New().Struct(config)
	if err != nil {
		return err
	}
	for _, enum := range config.Enums {
		enum.Name = upperPascalCase(enum.Name)
		enum.Impl = lowerPascalCase(enum.Name)
		err := os.MkdirAll(enum.Out, 0766)
		if err != nil {
			return err
		}
		f, err := os.Create(filepath.Join(enum.Out, fmt.Sprintf("%s.go", snakeCase(enum.Name))))
		if err != nil {
			return err
		}
		buf := &bytes.Buffer{}
		err = tmpl.Execute(buf, enum)
		if err != nil {
			return err
		}
		code, err := format.Source(buf.Bytes())
		if err != nil {
			return err
		}
		_, err = f.Write(code)
		if err != nil {
			return err
		}
	}
	return nil
}

func lowerPascalCase(s string) string {
	if len(s) == 0 {
		return s
	}
	return strings.ToLower(s[:1]) + s[1:]
}

func upperPascalCase(s string) string {
	if len(s) == 0 {
		return s
	}
	return strings.ToUpper(s[:1]) + s[1:]
}

func snakeCase(s string) string {
	var sb strings.Builder
	for i, r := range s {
		if i > 0 && unicode.IsUpper(r) {
			sb.WriteRune('_')
		}
		sb.WriteRune(unicode.ToLower(r))
	}
	return sb.String()
}
